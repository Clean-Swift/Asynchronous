//
//  HomeInteractor.swift
//  Asynchronous
//
//  Created by Raymond Law on 2/22/18.
//  Copyright (c) 2018 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic
{
  func completionHandler(request: Home.CompletionHandler.Request, completionHandler: (String) -> Void)
  func vipCycle(request: Home.VIPCycle.Request)
}

protocol HomeDataStore
{
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore
{
  var presenter: HomePresentationLogic?
  var worker: HomeWorker?
  
  // MARK: Use cases
  
  func completionHandler(request: Home.CompletionHandler.Request, completionHandler: (String) -> Void)
  {
    generateResult { (result) in
      completionHandler(result)
    }
  }
  
  func vipCycle(request: Home.VIPCycle.Request)
  {
    generateResult { (result) in
      let response = Home.VIPCycle.Response(result: result)
      presenter?.presentVIPCycle(response: response)
    }
  }
  
  private func generateResult(completionHandler: (String) -> Void)
  {
    let dateFormatter = DateFormatter()
    dateFormatter.dateStyle = .none
    dateFormatter.timeStyle = .medium
    let result = dateFormatter.string(from: Date())
    completionHandler(result)
  }
}
